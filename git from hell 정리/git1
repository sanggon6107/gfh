pwd : 현재 위치

cd : 디렉토리 이동

ls : 파일, 디렉토리 리스트. 속성 -al : 숨긴거 전부.

git init : 깃 시작. ~~~.git 파일 생성. 버전 정보가 여기 다 담겨있다.

git status :
	버전관리 상태 출력.

git add 'file name' :
	버전 관리 대상에 추가.
	이미 버전 관리 하고 있는 파일이라도 변경시 git add를 해야한다. 즉, add를 한 파일 만이 commit의 대상이 된다.
	예전 버전 관리 시스템과 차이점. 어떤 파일을 커밋하고, 어떤 파일을 커밋하지 않을지 선택할 수 있다.
	add를 한 파일은 커밋 대기 상태에 있게 된다. 커밋을 대기하는 파일이 있는 곳을 stage area라고 부른다.
	따라서, add를 하면 stage area에 있게 되고, 커밋 대기 상태에 놓이게 된다.

	git add . : 모든 파일 add한다.


글로벌 이름, 이메일 설정 :
	git config --global user.name '이름'
	git config --global user.email '이메일'

git commit :
	vim이 시작된다. i로 insert 모드 들어가서 커밋 메세지 작성.
	esc로 insert 모드 나온다.
	':wq'로 write, quit. 엔터하면 버전 추가 된다.

git commit -m "메세지" :
	메세지 담아서 커밋. vim 실행되지 않는다.


repository :
	커밋된 결과들이 저장되는 곳. 스테이지 에리어에서 커밋 하면 레파지토리로 가게 된다.

git log :
	히스토리 본다. 커밋 id 확인할 수 있다. commit id는 각 커밋의 고유 id이다.
	-p 속성 추가 : 코드 차이 볼 수 있다.
	q로 나올 수 있다.

git diff :
	git diff id1..id2     <- '..' 전후로 스페이스 누르면 안됨. 
	id1과 id2의 차이를 보여준다.

	git add를 하기 전에, 'git diff'  치면 최신 코드 변경 볼 수 있다.

	 	
